{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction useFetch(url) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setIsLoading(true);\n    axios.get(url).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      setError(err);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  }, [url]);\n\n  const refetch = () => {\n    setIsLoading(true);\n    axios.get(url).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      setError(err);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return {\n    data,\n    isLoading,\n    error,\n    refetch\n  };\n}\n\n_s(useFetch, \"Qxb2xEOOegLE3UwVAsDMiTNANhw=\");\n\nexport default useFetch; // =============================================================================================================================================================\n// import { useState, useEffect } from \"react\";\n// // How fetch method works -  https://www.youtube.com/watch?v=tc8DU14qX6I\n// // How to make a POST request using the fetch method - https://www.youtube.com/watch?v=Kw5tC5nQMRY&list=PLRqwX-V7Uu6YxDKpFzf_2D84p0cyk4T7X&index=11\n// // How to Abort a Fetch Request : https://www.youtube.com/watch?v=3yTs1NJZyBk&t=1s\n// export const useFetch = (url, method = \"GET\") => {\n// \tconst [data, setData] = useState(null);\n// \tconst [isPending, setIsPending] = useState(false);\n// \tconst [error, setError] = useState(null);\n// \tconst [options, setOptions] = useState(null);\n// \tconst postData = (postData) => {\n// \t\tsetOptions({\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: {\n// \t\t\t\t\"Content-Type\": \"application/json\",\n// \t\t\t},\n// \t\t\t// When sending data to a web server, the data has to be a string. Convert a JavaScript object into a string with JSON.stringify().\n// \t\t\tbody: JSON.stringify(postData),\n// \t\t});\n// \t};\n// \tuseEffect(() => {\n// \t\tconst controller = new AbortController();\n// \t\tconst fetchData = async (fetchOptions) => {\n// \t\t\tsetIsPending(true);\n// \t\t\ttry {\n// \t\t\t\t// The fetch() method takes one mandatory argument, the path to the resource you want to fetch.\n// \t\t\t\tconst res = await fetch(url, {\n// \t\t\t\t\t...fetchOptions,\n// \t\t\t\t\tsignal: controller.signal,\n// \t\t\t\t});\n// \t\t\t\tconsole.log(res);\n// \t\t\t\tif (!res.ok) {\n// \t\t\t\t\tthrow new Error(res.statusText);\n// \t\t\t\t}\n// \t\t\t\tconst data = await res.json();\n// \t\t\t\tconsole.log(data);\n// \t\t\t\tsetIsPending(false);\n// \t\t\t\tsetData(data);\n// \t\t\t\tsetError(null);\n// \t\t\t} catch (err) {\n// \t\t\t\tif (err.name === \"AbortError\") {\n// \t\t\t\t\tconsole.log(\"the fetch was aborted\");\n// \t\t\t\t} else {\n// \t\t\t\t\tsetIsPending(false);\n// \t\t\t\t\tsetError(\"could not fecth the data\");\n// \t\t\t\t}\n// \t\t\t}\n// \t\t};\n// \t\tif (method === \"GET\") {\n// \t\t\tfetchData();\n// \t\t}\n// \t\tif (method === \"POST\" && options) {\n// \t\t\tfetchData(options);\n// \t\t}\n// \t\treturn () => {\n// \t\t\tcontroller.abort();\n// \t\t};\n// \t}, [url, options, method]);\n// \treturn { data, isPending, error, postData };\n// };","map":{"version":3,"names":["useEffect","useState","axios","useFetch","url","data","setData","isLoading","setIsLoading","error","setError","get","then","response","catch","err","finally","refetch"],"sources":["C:/Users/qwerty/Desktop/Accenture/react-js-coding-test-level-1/src/Hooks/useFetch.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction useFetch(url) {\r\n\tconst [data, setData] = useState(null);\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetIsLoading(true);\r\n\t\taxios\r\n\t\t\t.get(url)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetData(response.data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tsetError(err);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t});\r\n\t}, [url]);\r\n\r\n\tconst refetch = () => {\r\n\t\tsetIsLoading(true);\r\n\t\taxios\r\n\t\t\t.get(url)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tsetData(response.data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tsetError(err);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn { data, isLoading, error, refetch };\r\n}\r\n\r\nexport default useFetch;\r\n\r\n// =============================================================================================================================================================\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// // How fetch method works -  https://www.youtube.com/watch?v=tc8DU14qX6I\r\n// // How to make a POST request using the fetch method - https://www.youtube.com/watch?v=Kw5tC5nQMRY&list=PLRqwX-V7Uu6YxDKpFzf_2D84p0cyk4T7X&index=11\r\n// // How to Abort a Fetch Request : https://www.youtube.com/watch?v=3yTs1NJZyBk&t=1s\r\n\r\n// export const useFetch = (url, method = \"GET\") => {\r\n// \tconst [data, setData] = useState(null);\r\n// \tconst [isPending, setIsPending] = useState(false);\r\n// \tconst [error, setError] = useState(null);\r\n// \tconst [options, setOptions] = useState(null);\r\n\r\n// \tconst postData = (postData) => {\r\n// \t\tsetOptions({\r\n// \t\t\tmethod: \"POST\",\r\n// \t\t\theaders: {\r\n// \t\t\t\t\"Content-Type\": \"application/json\",\r\n// \t\t\t},\r\n// \t\t\t// When sending data to a web server, the data has to be a string. Convert a JavaScript object into a string with JSON.stringify().\r\n// \t\t\tbody: JSON.stringify(postData),\r\n// \t\t});\r\n// \t};\r\n\r\n// \tuseEffect(() => {\r\n// \t\tconst controller = new AbortController();\r\n\r\n// \t\tconst fetchData = async (fetchOptions) => {\r\n// \t\t\tsetIsPending(true);\r\n\r\n// \t\t\ttry {\r\n// \t\t\t\t// The fetch() method takes one mandatory argument, the path to the resource you want to fetch.\r\n// \t\t\t\tconst res = await fetch(url, {\r\n// \t\t\t\t\t...fetchOptions,\r\n// \t\t\t\t\tsignal: controller.signal,\r\n// \t\t\t\t});\r\n// \t\t\t\tconsole.log(res);\r\n\r\n// \t\t\t\tif (!res.ok) {\r\n// \t\t\t\t\tthrow new Error(res.statusText);\r\n// \t\t\t\t}\r\n// \t\t\t\tconst data = await res.json();\r\n// \t\t\t\tconsole.log(data);\r\n\r\n// \t\t\t\tsetIsPending(false);\r\n// \t\t\t\tsetData(data);\r\n// \t\t\t\tsetError(null);\r\n// \t\t\t} catch (err) {\r\n// \t\t\t\tif (err.name === \"AbortError\") {\r\n// \t\t\t\t\tconsole.log(\"the fetch was aborted\");\r\n// \t\t\t\t} else {\r\n// \t\t\t\t\tsetIsPending(false);\r\n// \t\t\t\t\tsetError(\"could not fecth the data\");\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t};\r\n// \t\tif (method === \"GET\") {\r\n// \t\t\tfetchData();\r\n// \t\t}\r\n// \t\tif (method === \"POST\" && options) {\r\n// \t\t\tfetchData(options);\r\n// \t\t}\r\n// \t\treturn () => {\r\n// \t\t\tcontroller.abort();\r\n// \t\t};\r\n// \t}, [url, options, method]);\r\n\r\n// \treturn { data, isPending, error, postData };\r\n// };\r\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;EAAA;;EACtB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;EAEAD,SAAS,CAAC,MAAM;IACfQ,YAAY,CAAC,IAAD,CAAZ;IACAN,KAAK,CACHS,GADF,CACMP,GADN,EAEEQ,IAFF,CAEQC,QAAD,IAAc;MACnBP,OAAO,CAACO,QAAQ,CAACR,IAAV,CAAP;IACA,CAJF,EAKES,KALF,CAKSC,GAAD,IAAS;MACfL,QAAQ,CAACK,GAAD,CAAR;IACA,CAPF,EAQEC,OARF,CAQU,MAAM;MACdR,YAAY,CAAC,KAAD,CAAZ;IACA,CAVF;EAWA,CAbQ,EAaN,CAACJ,GAAD,CAbM,CAAT;;EAeA,MAAMa,OAAO,GAAG,MAAM;IACrBT,YAAY,CAAC,IAAD,CAAZ;IACAN,KAAK,CACHS,GADF,CACMP,GADN,EAEEQ,IAFF,CAEQC,QAAD,IAAc;MACnBP,OAAO,CAACO,QAAQ,CAACR,IAAV,CAAP;IACA,CAJF,EAKES,KALF,CAKSC,GAAD,IAAS;MACfL,QAAQ,CAACK,GAAD,CAAR;IACA,CAPF,EAQEC,OARF,CAQU,MAAM;MACdR,YAAY,CAAC,KAAD,CAAZ;IACA,CAVF;EAWA,CAbD;;EAeA,OAAO;IAAEH,IAAF;IAAQE,SAAR;IAAmBE,KAAnB;IAA0BQ;EAA1B,CAAP;AACA;;GApCQd,Q;;AAsCT,eAAeA,QAAf,C,CAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}